#
# This list gets parsed to a list of entries.
# An entry can be a title, an url or a test.
# Entries are separated by blank lines.
# A line starting with '#' is a comment and will be disregarded.
#
# Titles are underlined with '*', the syntax is <Main Tab>.<Sub Tab>, e.g.
#
#   DOM.Layout
#   **********
#
# An url starts with 'url:' followed by the url, on a new or on the same line, e.g.
#
#   url: http://opera.com
#
# A test entry must have a label and a description, it can have an optional url.
# The label starts with 'label:' followed by the label, on the same or on a new line.
# The description must describe the condition to define if a given test fails or passes.
# It starts with 'desc:' followed by a list of steps to iterate through the test.
# Each step can start with a '-' or a '*'.
# Ids are added automatically and shall never be changed manually.
# Adding a new test looks e.g.:
#
#   label: A new Test
#   desc:
#     - Step 1.
#     - Step 2.
#     - Step 3.
#


DOM.DOM
*******

url:
  http://dev.opera.com

id: 00100
label: Expand all nodes
desc:
  - Press the Expand button.
  - Verify that the whole document tree is displayed.

id: 00200
label: Export
desc:
  - Press the Export button.
  - Verify that the current view is displayed in a new tab.

id: 00300
label: Find with click
desc:
  - Turn the 'Find element' switch on.
  - Click some elements in the host.
  - Verify that the DOM view is updated with the clicked element as target.
  - Verify that the feature can be turned off.

id: 00400
label: Highlight elements
desc:
  - Turn the 'Highlight 'switch on.
  - Hover over some elements in the host.
  - Verify that the element is highlighted.
  - Hover some elements in the DOM view.
  - Verify that the according element is highlighted in the host.
  - Verify that the feature can be turned off.

id: 00500
label: Update DOM on node remove
desc:
  - Turn the 'Update DOM when a node is removed' switch on.
  - Enter URL: javascript:(function(){document.body.innerHTML=""})()
  - Verify that the DOM view is updated and body is empty.
  - Disable the switch.
  - Reload the original URL
  - Expand the DOM to see it.
  - Enter URL again: javascript:(function(){document.body.innerHTML=""})()
  - Verify that the DOM view is not changed and body contents are still visible.

id: 00600
label: Select multiple elements
deprecated: true
desc:
  - Turn the 'Draw border on selected elements' switch on.
  - Click some elements in the host.
  - Verify that all clicked elements keep a border.
  - Verify that the feature can be turned off.

id: 00700
label: Dropdown settings, comment nodes
deprecated: true
desc:
  - Select and unselect 'Show comment nodes'.
  - Verify that the DOM view is updated accordingly.

id: 00800
label: Dropdown settings, white space nodes
deprecated: true
desc:
  - Select 'Show DOM tree view'
  - Select and unselect 'Show white space nodes'.
  - Verify that the DOM view is updated accordingly
  (pure white space nodes are escaped, e.g. a space is dispaled as \u0020).

id: 00900
label: Dropdown settings, tree view
deprecated: true
desc:
  - Select and unselect 'Show DOM tree view'.
  - Verify that the view displays the DOM accordingly.

url: http://nzz.ch

id: 01000
label: Document select
desc:
  - Select a document with (i)frames
  - Verify that you can select each document in the dropdown.

url: http://dev.opera.com

id: 01100
label: Search document
desc:
  - Search for a term in the search box
  - Verify that the count of all hits is displayed in the status bar.
  - Verify that the view navigates to the next hit on enter.

url: ./test-cases/dom/edit-attribute.html

id: 01200
label: Edit attributes
desc:
  - Turn the 'Find element' switch on.
  - Go the the url above
  - Select the paragraph 'some text' in the host
  - Double click the class value 'foo' in the client
  - Verify that the attribute value is displayed in a edit field.
  - Change the value to 'bar' and verify that the background-color in the host changes instantly to green.
  - Verify that escape reverts the background-color back to cyan.
  - Verify that enter does keep the changes an leaves the edit mode.
  - Verify that tab moves to the edit field to the next attribute
  - Verify that at the end of a tag an empty field is shown to add a new attribute.

id: 01300
label: Edit markup
desc:
  - Double click a tag name
  - Change the content
  - Verify that the changes apply instantly in the host.
  - Verify that you can remove and edit also the body and html element.

id: 01400
label: Keyboard navigation
desc:
  - Click somewhere in the DOM view to focus the pane.
  - Verify that you can navigate with arrow keys and expand and close nodes with enter.
  - Click an element or attribute.
  - Verify that the click target is also the navigation target.

DOM.Styles
**********

url: ./test-cases/dom/matching-style-declarations.html

id: 00100
label: Matching style rules
desc:
  - unfold Computed Styles and Styles
  - select some elements in the DOM
  - Verify that the styles are updated

url: http://dev.opera.com

id: 00200
label: Hide initial value
desc:
  - Select and unselect the 'Hide initial value' switch
  - Verify that the Computed Style section is updated accordingly

id: 00300
label: Hide shorthands
deprecated: true
desc:
  - Select and unselect the 'Hide shorthands' switch
  - Verify that the Computed Style section is updated accordingly,
    e.g. if the switch is unchecked there must be an additional
    border, border-left, border-top, border-right and border-bottom rule.

id: 00400
label: Search
desc:
  - Expand both sections, Computed Styles and Styles
  - Search for a property, e.g. margin
  - Verify that both section collapse to only contain the matching properties

id: 00500
label: Searching for a newly added property
desc:
  - Add a property
  - Search for it and make sure it shows Update

id: 00600
label: Detaching
desc:
  - Add a property in attached mode
  - Detach and make sure the property is still shown
  - Do the same, but instead of adding a new property, delete one, and make sure it's still removed when switching back to attached mode

id: 00700
label: Escaping
desc:
  - Add a new property without submitting it
  - Press Escape
  - Make sure the property is removed from the view, and that the old style is re-applied

id: 00800
label: Switching view
desc:
  - Add a new property
  - Switch to some other view and then back
  - Make sure the newly added property is still visible
  - Do the same, but instead of adding a new property, delete one, and make sure it's still removed when switching the view back

id: 00900
label: Toggle property
desc:
  - Disable a property
  - Make sure the property is in fact disabled and that this is somehow visible in the UI
  - Enable the property
  - Make sure the style is re-applied and that this is reflected in the UI


DOM.Colorpicker
***************

url: ./test-cases/dom/colorpicker/index.html
id: 00100
label: Show and hide colorpicker
desc:
  - Open the testcase and inspect "test"
  - Verify that a small color swatch appears at the end of the color declaration for 'h1'
  - Click the color swatch
  - Verify that an utility window to edit the color value opens
  - Verify that no other property can be edited while the color picker is opened
  - Verify that the window can be closed by clicking the close button
  - Verify that the window gets closed on switching to an other mode

id: 00200
label: Edit color with visual controls
desc:
  - Open the testcase and inspect "test"
  - Click the color swatch of the color declaration to open the color picker
  - Verify that you can move around the circle with the mouse
  - Verify that the color examples in the top right corner changes accordingly
  - Verify that the values in all inputs updated accordingly
  - Verify that the color value gets updated accordingly in the 'Styles' panel
  - Verify that the color in the host document changes accordingly
  - Verify that you can change the color in the same way with the vertical slider
  - Select all other views of the color model with the radio select and verify the above for each color model

id: 00300
label: Edit color with inputs
desc:
  - Open the testcase and inspect "test"
  - Click the color swatch of the color declaration to open the color picker
  - Edit the value of one of the inputs
  - Verify that the other inputs are updated accordingly
  - Verify that the color examples in the top right corner changes accordingly
  - Verify that the color in the host document changes accordingly
  - Verify the above for each of the inputs

id: 00400
label: Edit transparent color
desc:
  - Open the testcase and inspect "test"
  - Click the color swatch of the background-color declaration to open the color picker
  - Verify that there are additional controls for the alpha value, a vertical slider and an input
  - Verify that the color examples gets a splitted background with black and white
  - Change the alpha value with the slider
  - Verify that the color examples in the top right corner changes accordingly
  - Verify that the values in the input updates accordingly
  - Verify that the color value gets updated accordingly in the 'Styles' panel
  - Verify that the color in the host document changes accordingly
  - Verify that the aplpha value can be changed in the same way with in the alpha input field

id: 00500
label: Reset color value
desc:
  - Open the testcase and inspect "test"
  - Click the color swatch of the color declaration to open the color picker
  - Change the current color
  - Verify that the color can be reset to the initial value by clicking the left part of the color example in the top right corner


DOM.Properties
**************

url: ./test-cases/dom/matching-style-declarations.html

id: 00100
label: Update view
desc:
  - Go to the url above
  - Unfold the whole DOM tree
  - Select the line '<p id="bar" class="foo">paragraph 1 </p>' in the DOM pane
  - Verify that 'id' has the value "bar" in the Properties pane
  - Select the line '<p class="foo">paragraph 2 </p>' in the DOM pane
  - Verify that 'id' has an empty string and 'class' a "foo" value in the Properties pane
  - Select the line '<p>paragraph 3</p>' in the DOM pane
  - Verify that both 'id' and 'class' have empty string values in the Properties pane

id: 00200
label: Unfold properties
desc:
  - Go to the url above
  - Unfold the whole DOM tree
  - Select the line '<p id="bar" class="foo">paragraph 1 </p>' in the DOM pane
  - Unfold the 'attributes' property in the Properties pane
  - Verify that property '0' and '1' are unfolded and that 'length' has a value of '2'
  - Collapse the 'attributes' property
  - Verify that all 'attributes' properties are removed
  - Repeat unfold and collapse several times
  - Verify that the properties are show and removed accordingly

id: 00300
label: Hide empty strings
desc:
  - Select and unselect the 'Hide empty strings' switch
  - Verify that the view is updated accordingly, e.g. that values which are empty strings, 0 or null are displayed or hidden.

id: 00400
label: Search
desc:
  - Search for some term
  - Verify that the matches are highlighted
  - Verify that on enter the next natch is scrolled into view.

DOM.Layout
**********

url: highlight-element.html

id: 00100
label: Highlight boxes
desc:
  - Go to the url above
  - Unfold the whole DOM tree
  - Select the line '<div>div</div>' in the DOM pane
  - Hover the dimension box in the center of the Metrics view in the Layout pane
  - Verify that the only the center with 'div' is highlighted in the host
  - Hover the 'padding', 'border' and 'margin' boxes in the Metrics view in the Layout pane
  - Verify that the boxes with the according labels are highlighted on the element in the host

id: 00200
label: Parent Offsets
desc:
  - Select some elements in the DOM
  - Verify the the parent offset chain is updated accordingly.
    Each parent offset must stand out in the parent node chain.
  - Verify that also the offset values are updated accordingly

id: 00300
label: Parent Offsets hover
desc:
  - Select some elements in the DOM
  - Hover over the different nodes in the parent node chain.
  - Verify that the according elements are highlighted in the host

DOM.Settings
************

url: ./test-cases/dom/edit-attribute.html

label: Use lower case tag names
desc:
  - Open Settings/Document
  - Verify that "Use lower case tag names for text/html" is checked (default setting)
  - Uncheck it.
  - Verify that tag names are displayed in uppercase.
  - Check it again.
  - Verify that tag names are displayed in lowercase.

url: ./test-cases/dom/nodes.html
  
label: Show DOM in tree view
desc:
  - Verify that comment is shown in document (1 comment node).
  - Open Settings/Document.
  - Verify that "Show comment nodes" is checked.
  - Uncheck it.
  - Verify that comment node is not shown.
  - Check it again.
  - Verify that comment node is shown again.

label: Show attributes
desc:
  - Verify that comment is shown in document (1 comment node).
  - Open Settings/Document.
  - Verify that "Show comment nodes" is checked.
  - Uncheck it.
  - Verify that comment node is not shown.
  - Check it again.
  - Verify that comment node is shown again.

DOM.Searchbar
*************

url: ./test-cases/dom/searchbar/basic-search.html

id: 00100
label: Show and hide the search-bar with search button
desc:
  - Select the 'Document' tab
  - Press the search button at the end of the toolbar
  - Verify that the search button keeps the pressed state
  - Verify that the search-bar appears and the search field gets focused
  - Press the search button again
  - Verify that the search button gets and keeps the unpressed state
  - Verify that the search-bar disappears
  - Repeat several times and verify that the search-bar appears and disappears accordingly
  - Press the search button to make the bar appear and switch to an other tab, e.g. Scripts
  - Switch back to 'Document'
  - Verify that the search-bar is still displayed
  - Switch forth and back several times between tabs and verify that the search-bar is always displayed

id: 00200
label: Show and hide the search-bar with shortcuts
desc:
  - Select the 'Document' tab
  - Click the DOM pane to ensure that the DOM view has focus
  - Hit 'ctrl f'
  - Verify that the search-bar gets displayed
  - Hit escape
  - Verify that the search-bar disappears
  - Display the search-bar again
  - Focus some other element in the DOM view, e.g. expand a node to blur the search field
  - Verify that if you hit 'escape' now the command line gets displayed instead

id: 00300
label: Perform a search
desc:
 - Open the test case, select the 'Document' tab and expand the whole DOM tree
 - Open the search-bar by hitting the search button
 - Search for 'cla'
 - Verify the 'Matches for "cla": Match 1 out of 7' is displayed in the bar
 - Verify that the matching tokens are highlighted in the document
 - Verify that the first match is highlighted differently
 - Continue to type 'class' and verify that all matches are instantly updated accordingly
 - Continue to type 'classe' and verify that all matches disappear and the string 'No match for "classe"' is displayed in the bar

url: ./test-cases/dom/searchbar/long-document.html
id: 00400
label: Move the search highlight
desc: 
 - Open the test case, select the 'Document' tab and expand the whole DOM tree
 - Open the search-bar by hitting the search button
 - Search for 'class' and verify that you get 7 hits
 - Hit 'enter'
 - Verify that the match highlight moves to the next match
 - Repeat and verify that the according match is scrolled into view
 - Hit 'Shift enter' and verify that the match highlight now moves in the other direction
 - Verify that you can move the search highlight in the same way with 'F3' and 'Shift F3'
 - Verify that you can move the search highlight in the same way with the two buttons close to the search filed



DOM.Breadcrumbs
***************

label: Updating of breadcrumbs
desc:
  - Click on different elements in the DOM view
  - Verify that the breadcrumbs update

label: Hover breadcrumbs
desc:
  - Verify that there are at least two visible breadcrumbs
  - Hover all of them
  - Verify that the elements are spotlighted in the host

label: Clicking breadcrumbs
desc:
  - Click a breadcrumb
  - Verify that the corresponding element is selected in the DOM view

label: Navigation buttons on resizing
desc:
  - Verify that the breadcrumb trail is long but fits inside the window
  - Resize the window so that the breadcrumbs don't fit
  - Verify that that navigation buttons appear on both sides

label: Navigation buttons on long breadcrumb trail
desc:
  - Click on a deeply nested element so that the breadcrumb trail is too long to fit inside the window
  - Verify that that navigation buttons appear on both sides
  - Verify that the end of the breadcrumb trail is visible and that the right button is disabled
  - Click on a shallow element
  - Verify that the buttons disappear

label: Interacting with navigation buttons
desc:
  - Click on a navigation button
  - Verify that the breadcrumbs move in that direction
  - Click and hold a navigation button
  - Verify that the breadcrumb trail is continously moving

label: Dragging the breadcrumb bar
desc:
  - Verify that the breadcrumb trail is too long to fit into the window
  - Grab the bar and drag it
  - Verify that it's possible to drag

label: Dragging the breadcrumb bar
desc:
  - Verify that the breadcrumb trail is too long to fit into the window
  - Use the mousewheel on top of the bar
  - Verify that it scrolls

Statusbar
*********

url: http://aleto.ch

id: 00100
label: Status info
deprecated: true
desc:
  - Select some elements in the DOM
  - Verify that the statusbar is updated with an according breadcrumb
  - Serach for some tokens.
  - Verify that the statusbar is updated with the matching count

id: 00200
label: Breadcrumb navigation
deprecated: true
desc:
  - Select some elements in the DOM
  - Verify that elements are highlighted on hover in the host
  - Verify that elements are selected on click in the host and in the DOM.

url: http://nzz.ch

id: 00300
label: Toggle long breadcrumbs
deprecated: true
desc:
  - Select a deep nested element in the document so that the breadcrumb is shortened,
    e.g. starts with 3 dots.
  - Verify that you can expand and collaps the breadcrump with the small toggle icon
    to the right of the status icon.

url: http://www.aleto.ch

id: 00400
label: Connection status
deprecated: true
desc:
  - Set a breakpoint on line 18 scrollFolders.js
  - Hover over the titles in the document
  - Verify that the status icon updates while stepping into the code

Scripts.Source
**************

url: ./test-cases/scripts-source/scripts.html

id: 00100
label: Reload button
desc:
  - Go to the above url
  - Open or connect the debugger after that
  - Switch to the Scripts
  - Press the reload button in the info box "Click the reload button above to fetch the scripts for the selected window".
  - Verify that you get 3 scripts in the dropdown and that you can select each of them.

url: ./test-cases/scripts-source/callstack.html

id: 00200
label: Set breakpoint
desc:
  - Set a breakpoint on line 4, 'var aa = 1;'.
  - Verify that a breakpoint is displayed on the clicked line.
  - Press the 'e()' button
  - Verify that the engine stops on line 4, e.g that the script is displayed
    and that an arrow points to the breakpoint

id: 00300
label: Remove breakpoint
desc:
  - Remove the previous set breakpoint on line 4, 'var aa = 1;'.
  - Verify that a breakpoint disappears on the clicked line.
  - Press the 'Continue' button in the debugger
  - Press the 'e()' button
  - Verify that the engine does not stops on line 4 and that no arrow is displayed on that line.

id: 00400
label: Breakpoint, Continue
desc:
  - Set a breakpoint on line 4, 'var aa = 1;'.
  - Press the 'e()' button
  - Verify that the 'Continue' button changes from disabled to enabled.
  - Press the 'Continue' button.
  - Verify that that the stopped pointer arrow disappears and that the button gets disabled.
  - Repeat several times and verify that it always works as described above.

id: 00500
label: Breakpoint, Continue with keyboard
desc:
  - The same as the previous test, but use the F8 key instead the mouse.

id: 00600
label: Breakpoint, Step into
desc:
  - Set a breakpoint on line 23, 'var ee = 1;'.
  - Press the 'e()' button.
  - Verify that the engine stops on that line
  - Press the 'Step Into' button continuously.
  - Verify that the stop arrow follows the execution flow,
    e.g. arrives at some point at 'var aa = 1;' and
    finishes one call after the other.

id: 00700
label: Breakpoint, Step into with keyboard
desc:
  - The same as the previous test, but use the F11 key instead the mouse.

id: 00800
label: Breakpoint, Step Over
desc:
  - Set a breakpoint on line 23, 'var ee = 1;'.
  - Press the 'e()' button.
  - Verify that the engine stops on that line
  - Pressing the 'Step Into' button continuously till you get to the line 'c();'.
  - Now press the 'Step Over' button.
  - Verify that engine stops right after 'c()' and does not follow the execution flow of 'c()'.

id: 00900
label: Breakpoint, Step Over with keyboard
desc:
  - The same as the previous test, but use the F11 and F10 key instead the mouse.

id: 01000
label: Breakpoint, Step Out
desc:
  - Set a breakpoint on line 23, 'var ee = 1;'.
  - Press the 'e()' button
  - Press the 'Step Into' button continuously till you get to 'var cc = 1;'.
  - Now press the 'Step Out' button continuously.
  - Verify that the engine stops at 'c()', then 'd()' and then finishes.

id: 01100
label: Breakpoint, Step Out with keyboard
desc:
  - The same as the previous test, but use the F11 and Shift-F11 key instead the mouse.

url: ./test-cases/scripts-source/scripts.html

id: 01200
label: Stop at new script
desc:
  - Open Dragonfly
  - Turn the 'Stop at new script' switch on.
  - Load the test url.
  - Verify that the engine stops for each new script (use the continue button), e.g. three times
  - Verify that the setting can be turned off.

url: ./test-cases/scripts-source/parse-error.html

id: 01300
label: Parse error
desc:
  - Open Dragonfly
  - Turn the 'Stop at error' switch on.
  - Go tho the test url
  - Verify that the Script Source pane opens,
    the first non parsable token is highlighted,
    e.g. the dot in 'var aa.a = 1;',
    any following code is greyed out and
    an info box with a hint for the cause of the error is displayed.
  - Verify that the setting can be turned off.

url: http://aleto.ch

id: 01400
label: Log threads
deprecated: true
desc:
  - Turn the 'Log threads' switch on.
  - Open 'Thread Log' view
  - Hover over the document of the above url
  - Verify that all threads are logged.

id: 01500
label: Search
desc:
  - Search for 'default'.
  - Verify that you 5 hits and that the view scrolls on enter to each of them.

Scripts.Search bar and window
*****************************

url: ./test-cases/scripts/searchbar-window/search.html

id: 00100
label: Switch between search bar and window
desc:
  - Select the 'Scripts' tab
  - Press the search button at the end of the toolbar to show the search bar
  - Press the 'More' button on the search bar
  - Verify that the search bar disappears and a search window gets displayed instead
  - Press the 'Less' button on the search window
  - Verify that the window closes and the search bar gets displayed instead
  - Switch between 'More' and 'Less' several times and verify that it works
  - Switch to 'More' and close the search window with the close button
  - Hit the search button on the tool bar again and verify that the search window opens directly
  - Switch back to 'Less', close the search bar, hit the search button again and verify that it now opens the search bar

id: 00200
label: Perform a search in the search window
desc:
  - Open the test url
  - Select the 'Scripts' tab, hit the search button and hit the 'More' button to open the search window
  - Verify that the search field has focus
  - Type 'abrax' and hit enter
  - Verify that the string 'Matches for "abrax": Match 1 out of 4' appears in the tool bar
  - Verify that four matches are displayed in the window
  - Verify that the first match is highlighted differently
  - Verify that for each match the according source line including line number is displayed
  - Hit 'Enter'
  - Verify that the match highlight moves down
  - Hit 'Shift Enter' 
  - Verify that the match highlight moves in the other direction
  - Verify that the match highlight can be moved in the same way with 'F3' and 'Shift F3'
  - Verify that the match highlight can be moved in the same way with the buttons close to the search field
  - Hit 'Ctrl Enter'
  - Verify that the file of the highlighted match is displayed in the source view
  - Verify that for each match the according file can be displayed with 'Ctrl Enter'



Scripts.Call Stack
******************

id: 00100
label: Set breakpoint, Callstack
url: ./test-cases/scripts-source/callstack.html
desc:
  - Set a breakpoint on line 4, 'var aa = 1;'.
  - Press the 'e()' button.
  - Verify that the Call Stack view displays the call stack.
  - Verify that each entry can be selected in the callstack.
  - Verify that the source view is updated on selecting an entry in the callstack.
  - Verify that the Inspection view is updated with the according scope.

Scripts.Inspection
******************

id: 00100
label: Hide default properties
deprecated: true
desc:
  - Do 'dir(window)' in the command line.
  - Select and unselect the *hide default properties' switch.
  - Verify that the according properties are shown or hidden in the view.

url: ./test-cases/js-inspection/inspectable-js-objects.html

id: 00200
label: Inspectable js objects
desc:
  - Go to the url above.
  - Verify that three entries appear, 'arguments', 'this' and 'ele',

id: 00300
label: Expand inspectable objects
desc:
  - Go to the url above.
  - Expand 'this'.
  - Verify that all properties of the window object are expanded.
  - Expand 'this.document'.
  - Verify that all propeties of the document are expanded.

id: 00400
label: Expand inspectable objects and change the view.
desc:
  - Go to the url above.
  - Expand 'this'.
  - Verify that all properties of the window object are expanded.
  - Expand 'this.document'.
  - Verify that all properties of the document are expanded.
  - Change to an other view, e.g. Error Console.
  - Switch back to Scripts.
  - Verify that all expanded properties are still expanded.

id: 00500
label: Collapse inspectable objects
desc:
  - Go to the url above.
  - Expand 'this'.
  - Collapse 'this'.
  - Verify that all expanded properties are removed.
  - Expand 'this'.
  - Expand 'this.document'.
  - Collapse 'this'.
  - Verify that all expanded properties are removed.
  - Expand 'this'.
  - Expand 'this.document'.
  - Collapse 'this.document'.
  - Verify that all properties of document are removed.

id: 00600
label: Setting 'Show the prototypes'.
desc:
  - Go to the url above.
  - Ensure that 'Show the prototypes' is on.
  - Expand 'ele'.
  - Verify that the whole prototype chain is displayed
    (HTMLHtmlElementPrototype, HTMLElementPrototype, ElementPrototype, NodePrototype, Object)
  - Collapse 'ele'.
  - Turn the setting off.
  - Expand 'ele'.
  - Verify that there is no prototype displayed.

id: 00700
label: Setting 'Show non enumerable properties'.
desc:
  - Go to the url above.
  - Ensure that 'Show non enumerable properties' is on.
  - Expand 'this'.
  - Verify that all non enumerable properties are displayed, e.g. a lot of
    HTML<some element name>Element interfaces.
  - Collapse 'this'.
  - Turn the setting off.
  - Expand 'this'.
  - Verify that all the non enumerables are not displayed.

id: 00800
label: Setting 'Show default null and empty string values'.
desc:
  - Go to the url above.
  - Ensure that 'Show default null and empty string values' is on.
  - Expand 'ele'.
  - Verify that all default values, which are either null or an empty string, are displayed.
    (onclick and friends, title).
  - Turn the setting off.
  - Verify that they now all disappear.

id: 00900
label: Setting Inspection 'Default collapsed prototype objects' in Settings
desc:
  - Go to the url above.
  - Ensure that 'Show the prototypes' is on.
  - Ensure that Settings Inspection 'Default collapsed prototype objects' is '*'.
  - Expand 'this'.
  - Verify that the 'Object' prototype is displayed and
    that none of its properties is shown.
  - Delete Settings Inspection 'Default collapsed prototype objects' and confirm with 'Apply'.
  - Collapse 'this'.
  - Expand 'this'.
  - Verify that the 'Object' prototype is displayed and all its properties are expanded.

Scripts.Command Line
********************

url: ./test-cases/scripts-source/callstack.html

id: 00100
label: Autosuggest
desc:
  - Set a breakpoint on line 23, 'var ee = 1;'.
  - Press the 'e()' button.
  - Focus the command line.
  - Hit tab.
  - Verify that you get the variables of the scope
  - Use 'Step Into' and verify for each scope that you get the correct variables.
  - Type 'this.'.
  - Hit tab repeatedly.
  - Verify that you get all properties of the window.
  - Start to write something after the dot and hit tab again.
  - Verify that the property gets completed with all matches.

id: 00200
label: History navigation.
desc:
  - Use the up and down arrows.
  - Verify that you get all previous submitted lines.

id: 00300
label: Object links.
desc:
  - Type e.g. 'this' and hit enter.
  - Verify that the result is the correct object displayed as link.
  - Click the link.
  - Verify that the according object is displayed in the Inspection view.

id: 00400
label: Built-in commands
desc:
  - Create some entries and type clear().
  - Verify that the view gets cleared.
  - Type e.g. 'dir(this)'
  - Verify that the according object is displayed in the Inspection view.

Console HUD
***********

label: Toggle console
desc:
  - Verify that the console is toggled by the console button and Esc
  - Verify that the console gets focus when shown

label: Resizing console
desc:
  - Verify that the console can be resized at the top

Console
*******

url: ./test-cases/repl/console_api.html

id: 00100
label: Console API: console.log
desc:
  - Click "console.log" button.
  - Verify that "Phlebotinum" is printed on the command line

id: 00200
label: Console API: console.log command line
desc:
  - Type 'console.log("hello")' on the command line
  - Verify that "hello" is printed on the command line

id: 00300
label: Console API: console.debug
desc:
  - Click "console.debug" button.
  - Verify that "Phlebotinum" is printed on the command line

id: 00400
label: Console API: console.info
desc:
  - Click "console.info" button.
  - Verify that "Phlebotinum" is printed on the command line

id: 00500
label: Console API: console.warn
desc:
  - Click "console.warn" button.
  - Verify that "Phlebotinum" is printed on the command line

id: 00600
label: Console API: console.error
desc:
  - Click "console.error" button.
  - Verify that "Phlebotinum" is printed on the command line

id: 00700
label: Console API: console.assert
desc:
  - Click "console.assert" button.
  - Verify that "false, Phlebotinum" is printed on the command line
  - Verify that "ERROR" is NOT printed on the command line

id: 00800
label: Console API: console.dir
desc:
  - Click "console.dir" button.
  - Verify that an expanded list of properties on the body object is shown

id: 00900
label: Console API: console.dir command line
desc:
  - Type "console.dir(document.body)" on the command line
  - Verify that an expanded list of properties on the body object is shown

id: 01000
label: Console API: console.dir alias
desc:
  - Type "dir(document.body)" on the command line
  - Verify that an expanded list of properties on the body object is shown

id: 01100
label: Console API: console.dirxml
desc:
  - Click "console.dirxml" button.
  - Verify that an expanded dom tree representing the body of the document is shown.

id: 01200
label: Console API: console.dirxml command line
desc:
  - Type "console.dirxml(document.body)" on the command line
  - Verify that an expanded dom tree representing the body of the document is shown.

id: 01300
label: Console API: console.dirxml alias
desc:
  - Type "dirxml(document.body)" on the command line
  - Verify that an expanded dom tree representing the body of the document is shown.

id: 01400
label: Console API: console.group
desc:
  - Click the "console.group" button
  - Verify that a group was added to the command line and that the text "Phlebotinum" is in the group
  - Enter some text
  - Verify that the text appears at the root level, not inside the group
  - Verify that clicking the +/- button expands and collapses the group.

id: 01500
label: Console API: console.time
desc:
  - Click the "console.time" button
  - Verify that "test: 1000ms (1000308µsec)" is printed in the console. The numbers will be slightly different but should be close to 1000ms.

id: 01600
label: Console API: console.trace
desc:
  - Click the "console.trace" button
  - Verify that a stack trace is printed in the console

id: 01700
label: Command line API: clear
desc:
  - Create some entries and type clear().
  - Verify that the view gets cleared.
  - Verify that the typed history was NOT cleared.

url: ./test-cases/repl/keys_values.html

id: 01800
label: Command line API: keys
desc:
  - Load the page
  - Type "keys(dict)"
  - Verify that "Array" is added to the console
  - Click the Array link
  - Verify that the array is of length 2 and contains the values "foo" and "bar"

id: 01900
label: Command line API: values
desc:
  - Load the page
  - Type "values(dict)"
  - Verify that "Array" is added to the console
  - Click the Array link
  - Verify that the array is of length 2 and contains the values "1" and "1"

id: 02000
label: Command line API: keys
desc:
  - Click the "console.trace" button
  - Verify that a stack trace is printed in the console

id: 02100
label: Command line API: keys
desc:
  - Click the "console.trace" button
  - Verify that a stack trace is printed in the console

url: ./test-cases/repl/misc_selection.html

id: 02200
label: Command line API: $1 $2
desc:
  - Load the page
  - Click on the "<p>" element in the dom view
  - Type $0 in the REPL view
  - Verify that HTMLParagraphElement is printed in the view
  - Click on the "<h1>" element in the dom view
  - Type $0 in the REPL view
  - Verify that HTMLHeadingElement is printed in the view
  - Type $1 in the REPL view
  - Verify that HTMLParagraphElement is printed in the view

id: 02300
label: Command line API: $()
desc:
  - Enter $("i") in th command line
  - Verify that HTMLElement is printed in the view

id: 02400
label: Command line API: $() on sites using jquery/other libs
desc:
  - Navigate to a site that uses jquery, like http://jquery.com
  - Enter $("i") in th command line
  - Verify that HTMLElement is printed in the view

id: 02500
label: Command line API: $$()
desc:
  - Enter $$(".c") in the command line
  - Verify that NodeList is printed in the view
  - Verify that the NodeList has a single item

id: 02600
label: Command line API: $x()
desc:
  - Enter $x("//body") in the command line
  - Verify that Array is printed in the view
  - Verify that the Array has a single item

id: 02700
label: Autocomplete, not stopped
deprecated: true
desc:
  - Type "docu"
  - Press tab
  - Verify that the input is expanded to "document"
  - Continue typing "b", so input is "document.b"
  - Press tab
  - Verify that the input is the same and that the expansions "baseURI, bgColor, body" are shown above the input
  - Continue typying "o"
  - Press tab
  - Verify that the input is expanded to "document.body"

url: ./test-cases/repl/autocomplete_stopped.html

id: 02800
label: Autocomplete, stopped
deprecated: true
desc:
  - Navigate to url
  - Verify that debugger has stopped
  - Type "f"
  - Press tab
  - Verify that input is expanded to "foo"
  - Clear input
  - Type "b"
  - Press tab
  - Verify that the input is the same and that the expansions "bar, baz" are shown above the input

id: 02900
label: History navigation
desc:
  - Use the up and down arrows.
  - Verify that you get all previous submitted lines.
  - Verify that the history contains no more entries than the repl -> Max items in typed history to remember setting

id: 03000
label: ctrl-w
desc:
  - Enter some text.
  - Press ctrl-w
  - Verify that all text up to the closest whitespace is deleted

id: 03100
label: ctrl-k
desc:
  - Enter some text.
  - Move the cursor to the middle of the line
  - Press ctrl-l
  - Verify that all text after the cursor is deleted

id: 03200
label: ctrl-a
desc:
  - Enter some text.
  - Press ctrl-a
  - Verify that the cursor moved to the start of the line

id: 03300
label: ctrl-l
desc:
  - Create some entries
  - Press ctrl-l
  - Verify that the view gets cleared.
  - Verify that the typed history was NOT cleared.

id: 03400
label: single line / multi line toggling
desc:
  - Press shift-enter
  - Verify that the input box changes appearance
  - Verify that the pressing tab inserts a tab character
  - Verify that up/down/left/right moves the cursor inside the text box
  - Press shift-enter
  - Press ctrl-enter
  - Verify that the input is evaluated

id: 03500
label: Pasting text
desc:
  - Copy some text that contains multiple lines
  - Paste the text into the command line
  - Verify that all the text is visible
  - Verify that the input box changed apperance and is in multi line mode

id: 03600
label: Welcome message
desc:
  - Switch to the command line view
  - Verify that the first line in the view contains the Opera version and core version

id: 03700
label: List-like object unpacking
desc:
  - Type [1, "foo", window] in the command line and hit enter
  - Verify that the output is Array[1, "foo", Window]
  - Verify that clicking Array opens the array object for inspection
  - Verify that clicking Window opens the window object for inspection
  - Type document.body.childNodes and hit enter
  - Verify that NodeList[<number of elements>] is shown.

id: 03800
label: Help command
desc:
  - Type //help()
  - Verify that a list of available commands is printed
  - type //man()
  - Verify that the output is identical to the output from the help command

id: 03900
label: jquery command
desc:
  - Type //jquery()
  - Verify jquery is loaded

id: 04000
label: Autocomplete, not stopped
desc:
  - Type "docu"
  - Press tab
  - Verify that the input is expanded to "document"
  - Continue typing "b", so input is "document.b"
  - Press tab
  - Verify that the input is the same and that the expansions "baseURI, bgColor, body" are shown above the input
  - Verify that baseURI is highlighted
  - Continue typing "o"
  - Press tab
  - Verify that the input is expanded to "document.body"
  - Type document.b
  - Press tab multiple times
  - Verify that a list of completions is shown and that the highlight moves forward when pressing tab
  - Verify that pressing the right arrow key has the same effect as pressing tab
  - Verify that pressing shift-tab moves the higlight backwards.
  - Verify that pressing the right arrow key has the same effect as pressing shift-tab
  - Press enter.
  - Verify that the higlighted word is entered in the console
  - Type document.b
  - Press tab
  - Press "."
  - Verify that the highlighted word is entered in the console
  - Verify that the keys [, ], (, ) have the samme effect as "."

url: ./test-cases/repl/unpack-list-alikes.html

id: 04100
label: Unpack list alikes
desc:
  - Open the test case
  - Ensure that 'Unpack list alikes in the command line' in settings &gt; 'General' is checked
  - Uncheck 'Use specific information to represent object in the commandline' in settings &gt; 'General'
  - Open the command line (hit 'escape' or hit the command line button)
  - Hit the 'console.log([1,2,3,4])' button
  - Verify that you get 'Array[1, 2, 3, 4]' in the command line (ignore a '[object Array]' before that)
  - Verify that 'Array' is clickable and opens the 'Inspection' view with the Array
  - Hit 'console.log(document.all)' button
  - Verify that you get 'HTMLCollection[HTMLHtmlElement, HTMLHeadElement, HTMLBodyElement, HTMLParagraphElement, HTMLInputElement, HTMLParagraphElement, HTMLInputElement, HTMLParagraphElement, HTMLInputElement, HTMLParagraphElement, HTMLInputElement]' (ignore a '[object HTMLCollection]' before that)
  - Verify that 'HTMLCollection' is clickable and opens the 'Inspection' view with the HTMLCollection
  - Verify that each element in the list is clickable and shows the according element in the DOM tree
  - Hit the 'console.log(document.childNodes)' button 
  - Verify that you get 'NodeList[DocumentType, HTMLHtmlElement]' in the command line (ignore a '[object HTMLCollection]' before that)
  - Verify that each object of type Element is clickable and shows the according element in the DOM tree
  - Verify that other objects are clickable too and open the according 'Inspection' view
  - Hit the 'console.log(xPathResult)' button
  - Verify that you get 'XPathResult[HTMLParagraphElement, HTMLParagraphElement, HTMLParagraphElement, HTMLParagraphElement]' in the command line (ignore a '[object XPathResult]' before that)
  - Verify that all objects are clickable and open the appropriated view
  - Write '[1,2,3,4]', 'document.all' and 'document.childNodes' in the command line
  - Verify that you get the same output back as before (without the ignorable line)
  - Write 'console.log([1,2,3,4])', 'console.log(document.all)' and 'console.log(document.childNodes)' in the command line
  - Verify that you get the same output as before, except that each output is followed by a 'undefined' return statement

id: 04200
label: Setting for unpack list alikes
desc:
  - Open the test case
  - Uncheck 'Unpack list alikes in the command line' in settings &gt; 'General'
  - Open the command line (hit 'escape' or hit the command line button)
  - Hit the 'console.log([1,2,3,4])' button
  - Verify that the output is now only a clickable 'Array' (ignore a '[object Array]' before that)
  - Hit 'console.log(document.all)' button
  - Verify that the ourtput is now only a clickable 'HTMLCollection' (ignore a '[object HTMLCollection]' before that)
  - Hit the 'console.log(document.childNodes)' button 
  - Verify that the output is now only a clickable 'NodeList' (ignore a '[object HTMLCollection]' before that)
  - Hit the 'console.log(xPathResult)' button
  - Verify that the output is now only a clickable 'XPathResult'

id: 04300
label: User friendly object representation
desc:
  - Open the test case
  - Ensure that 'Unpack list alikes in the command line' in settings &gt; 'General' is checked
  - Enable 'Use specific information to represent object in the commandline' in settings &gt; 'General'
  - Open the command line (hit 'escape' or hit the command line button)
  - Hit 'console.log(document.all)' button
  - Verify that you get 'HTMLCollection[html, head, body, p, input.foo, p, input#bar, p, input, p, input]'
  - Verify that all objects are clickable and open the appropriated view
  - Hit the 'console.log(document.childNodes)' button 
  - Verify that you get 'NodeList[DocumentType, html]' in the command line
  - Verify clickability
  - Hit the 'console.log(xPathResult)' button
  - Verify that you get 'XPathResult[p, p, p, p]' in the command line
  - Verify clickability
  - Write 'console.log(document.all)' and 'console.log(document.childNodes)' in the command line
  - Verify that you get the same output as before, except that each output is followed by a 'undefined' return statement

Scripts.Breakpoints
*******************

url: ./test-cases/breakpoints/breakpoints.html

id: 00100
label: Default breakpoint
desc:
  - Open the test case
  - Select the 'Scripts' tab and reload the document
  - Select the 'Breakpoints' panel and expand the 'Breakpoints' section
  - Set a breakpoint on line 8 in script 'a.js'
  - Verify that the 'Breakpoints' view get a new entry with a checked checkbox, the filename of the script with the line number and the according source code of that line
  - Uncheck the checkbox
  - Verify that the breakpoint in the script source now looks like a disabled breakpoint
  - Click the breakpoint in the source view
  - Verify that the panel view is updated and the breakpoint is checked now
  - Verify that the breakpoint works by hitting the 'test' button
  - Reload the host document
  - Verify that the breakpoint is still in the source file and the panel
  - Disable he breakpoint
  - Reload the host document again
  - Verify that the breakpoint is still disabled in the source view and the panel
  - Verify that the breakpoint has no effect by hitting the 'test' button


id: 00200
label: Conditional breakpoint
desc:
  - Open the test case
  - Select the 'Scripts' tab and reload the document
  - Select the 'Breakpoints' panel and expand the 'Breakpoints' section
  - Set a breakpoint on line 8 in script 'a.js'
  - Right click the breakpoint in the panel and select 'Add condition'
  - Type 'i > 9'
  - Verify that the breakpoint in the source view now looks like a breakpoint with a condition
  - Hit the 'test' button
  - Verify that the engine stops
  - Open the command line and submit 'i'
  - Verify that 'i' has the value 9
  - Uncheck the breakpoint in the panel
  - Verify that the breakpoint looks like a disabled breakpoint with condition in the source view
  - Enable the breakpoint in the source view
  - Verify that the view in the panel is updated accordingly and the breakpoint is checked
  - Reload the host document
  - Hit the 'test' button
  - Verify that the engines stops and 'i' still has the value 9
  - Disable the breakpoint
  - Reload the host document
  - Verify that the breakpoint looks like a disabled breakpoint in the source view and the panel
  - Verify that the breakpoint no longer has any effect by hitting the 'test' button

id: 00300
label: Delete breakpoint
desc:
  - Open the test case
  - Select the 'Scripts' tab and reload the document
  - Select the 'Breakpoints' panel and expand the 'Breakpoints' section
  - Set a breakpoint on line 8 in script 'a.js'
  - Verify that the breakpoint works by hitting the 'test' button
  - Right click the breakpoint in the panel and select 'Delete'
  - Verify that the breakpoints disappears in the panel and the the source view
  - Verify that the engine doesn't stop on any breakpoint by hitting 'test'
  - Reload the host document and hit 'test'
  - Verify that there is no longer a breakpoint

id: 00400
label: Disable and delete all breakpoints
desc:
  - Open the test case
  - Select the 'Scripts' tab and reload the document
  - Select the 'Breakpoints' panel and expand the 'Breakpoints' section
  - Set breakpoints on line 8 in script 'a.js', 'b.js', 'c.js' and 'd.js'
  - Add to all breakpoints the condition 'i > 8'
  - Hit the 'test' button
  - Verify that the engine stops in each script exactly once (use the 'Continue' button or 'F8' to continue)
  - Right click the breakpoint panel and select 'Disable all'
  - Verify that all breakpoints are unchecked 
  - Verify that in each script in the source view the breakpoints look like disabled conditional breakpoints
  - Hit the 'test' button again
  - Verify that none breakpoint stops the engine
  - Enable all breakpoints again and verify that they stop properly
  - Right click the breakpoint panel and select 'Delete all'
  - Verify that all breakpoints are removed from the panel
  - Verify for each script that all breakpoints are removed in the source view 
  - Hit the 'test' button
  - Verify that no breakpoint stops the execution
  
Scripts.Event Breakpoints
*************************

url: ./test-cases/event-breakpoints/simple-event.html

id: 00100
label: Quick find
desc:
  - Open the 'Event Breakpoint view' (Toolbar button in scripts)
  - Type 'mouse' in the 'Quick find' field
  - Verify that 'DOM level 3' is expanded and displays 'mousedown', 'mouseenter',
    'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup'

id: 00200
label: Simple event
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Quick find 'click' and check 'click'
  - Click into the host document
  - Verify that the debugger stops on entering the 'a' function

url: ./test-cases/event-breakpoints/multiple-events.html

id: 00300
label: Multiple events
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Check 'keydown', 'keyup', 'keypress', 'input'
  - Type something in the texatarea of the tests document
  - Verify that the debugger stops on entering the 'a' function
  - Verify that the event type is 'keydown' in e.g. the inspection or the REPL tab
  - Press the 'Continue' button
  - Verify that the debugger stops three more times with event type 'keypress', 'keyup', 'input'

url: ./test-cases/event-breakpoints/multiple-listeners.html

id: 00400
label: Multiple listeners
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Check 'input'
  - Type something in the textarea
  - Verify that the debugger stops on entering the 'a' function
  - Press the 'Continue' button
  - Verify that the debugger stops three more times on entering 'b', 'c' and 'd'

url: ./test-cases/event-breakpoints/modifier-event.html

id: 00500
label: Modifier Event
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Check 'DomNodeRemoved'
  - Press the 'test' button in the test document
  - Verify that the debugger stops on entering the 'a' function

url: ./test-cases/event-breakpoints/attribute-event-handler.html

id: 00600
label: Element attribute event handler
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Check 'click'
  - Click 'paragraph with a 'onclick' attribute' in the test document
  - Verify that the debugger stops in the according callback

url: test-cases/event-breakpoints/custom-event.html

id: 00700
label: Custom event
desc:
  - Go to the url above
  - Open the 'Event Breakpoint view'
  - Open the 'Custom Events' section
  - Press 'the 'Edit' button
  - Enter 'test' and save
  - Check 'test'
  - Press the 'Dispatch custom event 'test'' button in the test document
  - Verify that the debugger stops on entering the 'test' function

Scripts.Watches
*******************

url: ./test-cases/breakpoints/breakpoints.html

id: 00100
label: Add a watch
desc:
  - Open the test case
  - Select the 'Scripts' tab and reload the document
  - Set a breakpoint on line 8 in script 'a.js'
  - Select the 'State' tab and expand the 'Watches' section
  - Click the 'Add' button, write 'i' and add the watch by hitting 'Enter'
  - Verify that 'i' now has the value 'Error'
  - Hit the 'test' button
  - Verify that 'i' has now the value 0
  - Continue with hitting the 'Continue' button or with 'F8'
  - Verify that i updates accordingly and fals back to 'Error' at the end
  - Add an other watch 'document'
  - Verify that 'document' is an expandable entry

id: 00200
label: Right click option for a watch entry
desc:
  - Select the 'Scripts' tab and reload the document
  - Select the 'State' tab and expand the 'Watches' section
  - Add a watch 'document'
  - Right click the watch and select 'Edit'
  - Change the value to 'window'
  - Verify that the entry is now an expandable 'Window' object
  - Right click the watch and select 'Delete'
  - Verify that the watch is removed from the view
  - Right click the panel, select 'Add' and verify that you can some watch  



Network.Request Log
*******************

url: ./test-cases/network/img-js-css.html

id: 00100
label: Request table
desc:
  - Go to the url above
  - Verify that the request table makes sense
  - Reload the document
  - Verify that the table still makes sense

id: 00200
label: Request and response detail
desc:
  - Expand some of the entries
  - Verify that the info in 'Summary', 'Headers' and 'Raw' makes sense

id: 00300
label: Clear log
deprecated: true
desc:
  - Press the 'Clear log' button
  - Verify that the view gets cleared.

Storage.Cookies
***************

url: ./test-cases/storages/create-storages.html

url: ./test-cases/storages/check-storages.html

id: 00100
label: Inspect cookies
desc:
  - Go to the above url in the above order
  - Verify that you see cookie a - j

url: ./test-cases/storages/check-storages.html

id: 00200
label: Delete cookies
desc:
  - Delete some of the cookies
  - Reload the document
  - Verify that the deleted cookies are gone.

id: 00300
label: Edit cookies
desc:
  - Double click some of the cookie values.
  - Change the value and save.
  - Reload the document
  - Verify that the values still are changed

id: 00400
label: Delete all cookies
desc:
  - Press the 'Delete all' button
  - Reload the document.
  - Verify that all cookies are gone.

id: 00500
label: Add new cookies
desc:
  - Press the add button
  - Add some key and value
  - Reload the document
  - Verify that there is a new created cookie with the according key and value.

Storage.Local Storage
*********************

url: ./test-cases/storages/create-storages.html

url: ./test-cases/storages/check-storages.html

id: 00100
label: Inspect local storage
desc:
  - Go to the above url in the above order
  - Verify that you see local storage item a - j

url: ./test-cases/storages/check-storages.html

id: 00200
label: Delete local storage items
desc:
  - Delete some of the local storage items
  - Reload the document
  - Verify that the deleted items are gone.

id: 00300
label: Edit local storage items
desc:
  - Double click some of the item values.
  - Change the value and save.
  - Reload the document
  - Verify that the values still are changed

id: 00400
label: Delete all local storage items
desc:
  - Press the 'Delete all' button
  - Reload the document.
  - Verify that all local storage items are gone.

id: 00500
label: Add new local storage items
desc:
  - Press the add button
  - Add some key and value
  - Reload the document
  - Verify that there is a new created item with the according key and value.

Storage.Session Storage
*********************

url: ./test-cases/storages/create-storages.html

url: ./test-cases/storages/check-storages.html

id: 00100
label: Inspect session storage
desc:
  - Go to the above url in the above order
  - Verify that you see session storage item a - j

url: ./test-cases/storages/check-storages.html

id: 00200
label: Delete session storage items
desc:
  - Delete some of the session storage items
  - Reload the document
  - Verify that the deleted items are gone.

id: 00300
label: Edit session storage items
desc:
  - Double click some of the item values.
  - Change the value and save.
  - Reload the document
  - Verify that the values still are changed

id: 00400
label: Delete all session storage items
desc:
  - Press the 'Delete all' button
  - Reload the document.
  - Verify that all session storage items are gone.

id: 00500
label: Add new session storage items
desc:
  - Press the add button
  - Add some key and value
  - Reload the document
  - Verify that there is a new created item with the according key and value.

# TODO create a W3C widget with storage items

Error Console.All Console.JavaScript Console.CSS
************************************************

url: ./test-cases/error-console/error.html

id: 00100
label: Inspect errors
desc:
  - Go to the url above
  - Verify that there is a js and a css error
  - Verify that the entries can be expanded to see the details
  - Verify that only the js error is in the JavaScript pane
  - Verify that only the css error is in the CSS pane

id: 00200
label: Clear log
desc:
  - Press the 'Clear Log' button
  - Verify that the log is cleared
  - Verify that in the 'All', 'JavaScript' and 'CSS' pane.

id: 00300
label: Expand all
desc:
  - Select and unselect the 'Expand all' switch
  - Verify that the entries are expanded and collapse accordingly
  - Verify that in the 'All', 'JavaScript' and 'CSS' pane.

Utilities.Color Picker
**********************

url: http://www.nzz.ch

id: 00100
label: Pixel Magnifier
desc:
  - Hover over the page
  - Verify that the screenshot area is updated accordingly
  - Click some where on a image
  - Verify that the updating of the screenshot area stops.
  - Change the Area in the dropdown
  - Verify that the screenshot area is updated accordingly
  - Change the scale
  - Verify that the screenshot area is update accordingly
  - Press the 'Reset default values' button.
  - Verify that the values and the screenshot area are reset.

id: 00200
label: Color Picker
desc:
  - Select an image
  - Click in the screenshot area.
  - Verify that the screenshot highlights the selected area and updates the average color of the selected area.
  - Change the 'Average color' in the dropdown.
  - Click again in the screenshot.
  - Verify that the average color is updated accordingly.

id: 00300
label: Store colors
desc:
  - Select some colors and store them.
  - Verify that they are displayed as 'stored colors'.
  - Press 'Manage stored colors'.
  - Delete some of the store colors.
  - Press 'Done'.
  - Verify that the colors are removed.

Settings.Settings
*****************

label: Settings window
desc:
- Check if settings button is visible.
- Click settings button.
- Verify that the button is styled as pressed.
- Verify that settings window appears and background is faded.
- Verify that UI elements other than settings window are disabled/inaccessible.
- Click settings button again.
- Verify that the button styled as unpressed.
- Verify that settings window disappeared.

id: 00100
label: Expand sections
deprecated: true
desc:
- Expand all the sections
- Verify that the sections display additional info and settings

label: Settings tabs
desc:
- Verify if all tabs are clickable in settings window.
- Verify that contents are properly changed.

label: General settings
- Uncheck "Show only browser windows..." checkbox.
- Open a bookmark manager window.
- Verify that the new window is shown in debug context menu.
- Check "Show only browser windows..." checkbox.
- Verify that the bookmarks window is not shown in debug context menu.

id: 00200
label: Remote debug
deprecated: true
desc:
  - Start Dragonfly with the Opera built-in proxy
  - Unfold 'Remote Debug'
  - Select 'Remote Debug' and press 'Apply'
  - Connect an other Opera instance to Dragonfly
  - Verify that the connection succeeds and that Dragonfly seems to work.
  - Uncheck 'Remote Debug' and press 'Apply'
  - Verify that Dragonfly debugs the client instance.
  - Repeat several times the above steps.
  - Verify that reconnecting to a remote Opera instance always works.

id: 00300
label: Host highlight
deprecated: true
desc:
  - Expand 'Spotlight' and expand 'Advanced'
  - Change some colors
  - Switch back to DOM
  - Verify that the colors for the highlight have changed accordingly.
  - Go back to 'Spotlight' and press 'Reset Default Colors'
  - Verify that the colors have changed back.

id: 00400
label: Shortcut Configuration, Quick find
deprecated: true
desc:
  - Keyboard shortcuts tab
  - Type 'ctrl' in the 'Quick find' field
  - Verify that all shortcuts with a 'ctrl' token are displayed

label: Keyboard shortcuts, Quick find
desc:
  - Click Keyboard shortcuts tab
  - Expand 'Shortcut Config'
  - Type 'ctrl' in the 'Quick find'
  - Verify that all shortcuts with a 'ctrl' token are displayed

id: 00500
label: Shortcut Configuration
deprecated: true
desc:
  - Expand 'Shortcut Config'
  - Expand 'Keyboard shortcuts Global'
  - Change 'ctrl a' to 'ctrl b'
  - Press the 'Save' button
  - Verify that 'ctrl b' now selects all text
  - Press the 'Reset all to defaults' button
  - Verify that 'ctrl b' no longer selects all text
  - Expand 'Keyboard shortcuts Global'
  - Change 'f8' to 'f80'
  - Press the 'save' button
  - Verify that a 'Invalid keyboard shortcut' label is added to the changed shortcut

label: Keyboard shortcuts
desc:
  - Expand 'Keyboard shortcuts Global'
  - Change 'ctrl a' to 'ctrl b'
  - Click 'Apply' button
  - Verify that 'ctrl b' now selects all text
  - Press the 'Reset to defaults' button
  - Verify that 'ctrl b' no longer selects all text
  - Expand 'Keyboard shortcuts Global'
  - Change 'f8' to 'f80'
  - Click 'Apply' button
  - Verify that a 'Invalid keyboard shortcut' label is added to the changed shortcut

label: About tab
desc:
  - Verify contents of the About tab
  - Verify that the system related information is present and correct.

General
*******

id: 00100
label: Dock and undock
desc:
  - Dock and undock the Dragonfly window
  - Verify that all views have still the same information.

id: 00200
label: Dragonfly menu
deprecated: true
desc:
  - Verify that 'Reload Debug Context' works
  - Focus an other window than the current debug context.
  - Verify that 'Select Active Window' works
  - Verify that each open tab can be selected as debug context.

id: 00300
label: Debug context menu display
desc:
  - Click debug context menu button.
  - Verify that the menu opens and button is styled as pressed.
  - Verify that the settings

Remote debug
************

label: Enable remote debug mode
desc:
  - Click remote debug button.
  - Verify that remote debug dialog appears.
  - Verify that port shown by default is 7001.
  - Click Apply button.
  - Verify that displayed instructions are correct.
  - Connect your opera instance according to instructions.
  - Verify that the debugging context is properly displayed.
  - Verify that remote debug button shows an animation for remote debug.

label: Disable remote debug mode
desc:
  - Click remote debug button.
  - Verify that displayed window has the button "Cancel Remote Debug".
  - Click button.
  - Verify that you are returned to debugging your previous environment.

label: Dragonfly startup in remote debug mode
desc:
  - Enable remote debug mode in Dragonfly on port 7101.
  - Close Dragonfly.
  - Open Dragonfly.
  - Verify that Dragonfly starts up in remote debug mode.
  - Verify that port number is 7101.

label: Warn on port conflict
desc:
  - Choose a port that is already taken and appply
  - Verify that there's an error message
  - Verify that the local connection is set up when dismissing the overlay

label: Local connection setup
desc:
  - Choose a port and click apply, but don't connect
  - Dismiss the overlay
  - Verify that the local connection is set up

Overlays
********

label: Show overlay
desc:
  - Click the settings button
  - Verify that the overlay is shown
  - Hide it, do the same with other overlays

label: Hide overlay
desc:
  - Click the settings button while the settings overlay is visible
  - Verify that the overlay hides
  - Do the same with other overlays

label: Hide overlay by Esc
desc:
  - Press Esc while the settings overlay is visible
  - Verify that the overlay hides
  - Do the same with other overlays

Status badges/icons
*******************

label: Badge when stopped
desc:
  - Set a breakpoint and hit it
  - Verify that the Script tab gets a badge showing that the script is stopped

label: Error count
desc:
  - Go to a page with errors
  - Verify that the Error tab gets a badge with the number of errors
  - Verify that the badge gets hidden when pressing Clear log in the Errors Tab
  - Verify that the error count starts on 0 next time

